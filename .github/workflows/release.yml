---
name: Build and Release

'on':
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.1)'
        required: true
        default: 'v1.0.1'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'browser/package-lock.json'

      - name: Install dependencies
        run: |
          cd browser
          npm ci

      - name: Build static site
        run: |
          cd browser
          npm run build

      - name: Build Garmin apps
        run: |
          cd garmin
          make docker-build

      - name: Test Garmin apps and generate screenshots
        run: |
          cd garmin
          # Install dependencies for screenshot capture in CI
          sudo apt-get update
          sudo apt-get install -y xvfb scrot imagemagick
          
          # Create virtual display for headless screenshot capture
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 &
          sleep 3
          
          # Run tests (will create placeholder screenshots in CI environment)
          make test-all DEVICE=vivoactive4 || true
          
          # Generate screenshot documentation even if actual screenshots fail
          make screenshots DEVICE=vivoactive4 || true
          make screenshots DEVICE=fenix6 || true
          
          # List generated files for verification
          find . -name "*.png" -o -name "*.txt" -o -name "*.md" | grep -E "(screenshot|test)" || echo "No screenshots generated (expected in CI)"

      - name: Create release archive
        run: |
          cd browser/dist
          zip -r ../../eversense-companion-static-site.zip .
          tar -czf ../../eversense-companion-static-site.tar.gz .
          cd ../../garmin/dist
          zip -r ../../eversense-garmin-apps.zip *.prg *.md
          
          # Include screenshots and test documentation if available
          cd ..
          if [ -d "screenshots" ]; then
            cd screenshots
            zip -r ../../eversense-garmin-screenshots.zip . 
            cd ..
          fi
          if [ -d "test-output" ]; then
            cd test-output
            zip -r ../../eversense-garmin-test-reports.zip .
            cd ..
          fi
          cd ..

      - name: Get version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Eversense Companion ${{ steps.version.outputs.version }}
          body: |
            ## 🩸 Eversense Companion - Blood Glucose Monitor

            This release contains the complete static site for the Eversense
            Companion D3.js blood glucose visualization application and Garmin
            Connect IQ apps for watchface and datafield glucose monitoring.

            ### 📦 Downloads
            - **eversense-companion-static-site.zip** - Complete static site
              (ZIP format)
            - **eversense-companion-static-site.tar.gz** - Complete static site
              (TAR.GZ format)  
            - **eversense-garmin-apps.zip** - Garmin Connect IQ apps for all
              supported devices
            - **eversense-garmin-screenshots.zip** - Screenshots showing app
              appearance on different devices (if available)
            - **eversense-garmin-test-reports.zip** - Test reports and validation
              documentation (if available)

            ### 🚀 Quick Deployment - Web App
            1. Download and extract the static site archive
            2. Upload the contents to any static web hosting service
            3. Access the application through your web browser
            4. Enter your Eversense credentials to view glucose data

            ### 🏃 Quick Installation - Garmin Apps
            1. Download and extract eversense-garmin-apps.zip
            2. Copy the .prg file for your device to your Garmin watch
            3. Configure your Eversense credentials in the app settings
            4. Enjoy glucose monitoring on your wrist!

            ### ✨ Features
            - **Web App**: Real-time blood glucose monitoring with D3.js charts
            - **Garmin Watchface**: Time, glucose, heart rate, battery on watch face
            - **Garmin Datafield**: Glucose readings during workouts/activities
            - Color-coded glucose zones (Good: 80-130 mg/dL, High: >130 mg/dL,
              Low: <80 mg/dL)
            - Interactive tooltips and trend indicators
            - Responsive design for desktop and mobile
            - Direct integration with Eversense API

            ### 📱 Supported Garmin Devices
            - Vivoactive 4/4S
            - Venu/Venu 2/2S
            - Fenix 6/6S/6X
            - Forerunner 245
            - Other Connect IQ 3.2+ devices

            ### 🔧 Local Development
            ```bash
            # Web App
            cd browser && npm install && npm run dev

            # Garmin Apps  
            cd garmin && make build DEVICE=vivoactive4
            # or with Docker: make docker-build
            ```

            For detailed setup instructions, see the README.md files included
            in each release.
          files: |
            eversense-companion-static-site.zip
            eversense-companion-static-site.tar.gz
            eversense-garmin-apps.zip
            eversense-garmin-screenshots.zip
            eversense-garmin-test-reports.zip
          draft: false
          prerelease: false

  deploy-pages:
    runs-on: ubuntu-latest
    needs: build-and-release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'browser/package-lock.json'

      - name: Install dependencies
        run: |
          cd browser
          npm ci

      - name: Build static site
        run: |
          cd browser
          npm run build

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: ./browser/dist

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v3
